#!/usr/bin/python

import argparse
import os
import signal
import sys
import time
import urllib2
import boto.route53
from boto.route53.record import ResourceRecordSets

parser = argparse.ArgumentParser(description='Register the local EC2 instance in Route53, updating an existing record')
parser.add_argument('--domain-name', metavar='<NAME>', default=os.environ.get('DOMAIN_NAME'), help='Name of AWS Route 53 domain that should be used for registration')
parser.add_argument('--access-key', metavar='<ACCESS>', default=os.environ.get('AWS_ACCESS_KEY'))
parser.add_argument('--secret-key', metavar='<SECRET>', default=os.environ.get('AWS_SECRET_KEY'))
args = parser.parse_args()

if args.access_key and args.secret_key:
    conn = boto.connect_route53(os.environ.get('AWS_ACCESS_KEY'), os.environ.get('AWS_SECRET_KEY'))
else:
    conn = boto.connect_route53()

def get_zone_id(hostname):
    domain = '.'.join(hostname.split('.')[1:])
    zone = conn.get_hosted_zone_by_name(domain)
    if not zone:
        print "Domain {} can't be managed".format(domain)
        exit(1)
    return zone.GetHostedZoneResponse.Id.split('/')[2]

instance_id = urllib2.urlopen('http://169.254.169.254/latest/meta-data/instance-id').read()
public_ip = urllib2.urlopen('http://169.254.169.254/latest/meta-data/public-ipv4').read()
zone_id = get_zone_id(args.domain_name)

def register(domain_name, instance_id, public_ip):
    print "Registering instance {} with public IP {} to domain {}".format(instance_id, public_ip, domain_name)
    response = conn.get_all_rrsets(zone_id, 'A', domain_name, maxitems=1)[0]
    if public_ip not in response.resource_records:
        changes = ResourceRecordSets(conn, zone_id)
        if response.resource_records and response.name == (domain_name + "."):
            delete_change = changes.add_change("DELETE", domain_name, 'A', response.ttl)
            for old_value in response.resource_records:
                delete_change.add_value(old_value)
        create_change = changes.add_change("CREATE", domain_name, 'A', response.ttl)
        if response.name == (domain_name + "."):
            for old_value in response.resource_records:
                create_change.add_value(old_value)
        create_change.add_value(public_ip)
        changes.commit()

def deregister_func(domain_name, instance_id, public_ip):
    def handler(*args, **kwargs):
        print "Deregistering instance {} with public IP {} from domain {}".format(instance_id, public_ip, domain_name)
        response = conn.get_all_rrsets(zone_id, 'A', domain_name, maxitems=1)[0]
        changes = ResourceRecordSets(conn, zone_id)
        delete_change = changes.add_change("DELETE", domain_name, 'A', response.ttl)
        if public_ip in response.resource_records and len(response.resource_records) > 1:
            create_change = changes.add_change("CREATE", domain_name, 'A', response.ttl)
        for old_value in response.resource_records:
            delete_change.add_value(old_value)
            if public_ip != old_value:
                create_change.add_value(old_value)
        changes.commit()
        sys.exit(0)
    return handler

register(args.domain_name, instance_id, public_ip)
deregister = deregister_func(args.domain_name, instance_id, public_ip)
signal.signal(signal.SIGTERM, deregister)
signal.signal(signal.SIGINT, deregister)

while True:
    time.sleep(5)
